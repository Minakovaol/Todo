{"version":3,"sources":["api/todolists-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/tasks-reducer.ts","Todolist.tsx","state/todolists-reducer.ts","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","todolistId","Task","onClickHandler","useCallback","removeTask","task","id","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","status","Checkbox","Delete","initialState","Todolist","dispatch","useDispatch","useEffect","then","res","action","tasks","type","setTasksAC","data","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","removeTodolist","map","style","paddingTop","Button","App","todolists","useSelector","state","taskId","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","removeTodolistAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","item","Paper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","newTasks","newTask","todoListId","description","startDate","deadline","addedDate","order","priority","Low","todolistTasks","newTasksArray","copyState","forEach","todolist","find","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iHAqDYA,EAOAC,E,yFCnDCC,EAAcC,IAAMC,MAAK,SAAUC,GAC5CC,QAAQC,IAAI,sBAD6D,MAGjDC,mBAAS,IAHwC,mBAGpEC,EAHoE,KAG7DC,EAH6D,OAIjDF,mBAAwB,MAJyB,mBAIpEG,EAJoE,KAI7DC,EAJ6D,KAMnEC,EAAU,WACS,KAAjBJ,EAAMK,QACNT,EAAMQ,QAAQJ,GACdC,EAAS,KAETE,EAAS,sBAiBjB,OAAO,gCACH,cAACG,EAAA,EAAD,CAAWC,QAAQ,WACRL,QAASA,EACTM,MAAOR,EACPS,SAjBS,SAACC,GACrBT,EAASS,EAAEC,cAAcH,QAiBdI,WAdW,SAACF,GACT,OAAVR,GACAC,EAAS,MAEM,KAAfO,EAAEG,UACFT,KAUOU,MAAM,QACNC,WAAYb,IAEvB,cAACc,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,EAArC,SACI,cAACe,EAAA,EAAD,YCvCCC,EAAe1B,IAAMC,MAAK,SAAUC,GAC7CC,QAAQC,IAAI,uBAD+D,MAE7CC,oBAAS,GAFoC,mBAEtEsB,EAFsE,KAE5DC,EAF4D,OAGnDvB,mBAASH,EAAMY,OAHoC,mBAGtER,EAHsE,KAG/DC,EAH+D,KAiB3E,OAAOoB,EACD,cAACf,EAAA,EAAD,CAAWE,MAAOR,EAAOS,SALX,SAACC,GACjBT,EAASS,EAAEC,cAAcH,QAIyBe,WAAS,EAACC,OATvC,WACrBF,GAAY,GACZ1B,EAAMa,SAAST,MAQb,sBAAMyB,cAda,WACrBH,GAAY,GACZrB,EAASL,EAAMY,QAYb,SAAwCZ,EAAMY,W,mCFzBlDkB,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAe,WAEpB,OAAON,EAASO,IAAoB,eAF/BD,EAAe,SAafE,GACL,OAAOR,EAASO,IAAT,qBAA6CC,EAA7C,a,SA4BH3C,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KG9CL,IAAM2C,EAAOzC,IAAMC,MAAK,SAACC,GAC5B,IAAMwC,EAAiBC,uBAAY,kBAAMzC,EAAM0C,WAAW1C,EAAM2C,KAAKC,GAAI5C,EAAMsC,cAAa,CAACtC,EAAM2C,KAAKC,GAAI5C,EAAMsC,aAE5GO,EAAkBJ,uBAAY,SAAC3B,GACjC,IAAIgC,EAAiBhC,EAAEC,cAAcgC,QACrC/C,EAAMgD,iBAAiBhD,EAAM2C,KAAKC,GAAIE,EAAiBnD,EAAasD,UAAYtD,EAAauD,IAAKlD,EAAMsC,cACzG,CAACtC,EAAM2C,KAAKC,GAAI5C,EAAMsC,aAEnBa,EAAuBV,uBAAY,SAACW,GACtCpD,EAAMqD,gBAAgBrD,EAAM2C,KAAKC,GAAIQ,EAAUpD,EAAMsC,cACtD,CAACtC,EAAM2C,KAAKC,GAAI5C,EAAMsC,aAEzB,OAAO,sBAAyBgB,UAAWtD,EAAM2C,KAAKY,SAAW5D,EAAasD,UAAY,UAAY,GAA/F,UACH,cAACO,EAAA,EAAD,CACIT,QAAS/C,EAAM2C,KAAKY,SAAW5D,EAAasD,UAC5C5B,MAAM,UACNR,SAAUgC,IAGd,cAACrB,EAAD,CAAcZ,MAAOZ,EAAM2C,KAAKvC,MAAOS,SAAUsC,IACjD,cAAC/B,EAAA,EAAD,CAAYE,QAASkB,EAArB,SACI,cAACiB,EAAA,EAAD,QATSzD,EAAM2C,KAAKC,O,wCCL1Bc,EAA+B,GCMxBC,EAAW7D,IAAMC,MAAK,SAAUC,GACzCC,QAAQC,IAAI,mBAEZ,IAAM0D,EAAWC,cAEjBC,qBAAU,WD4Fc,IAACxB,EC3FrBsB,GD2FqBtB,EC3FCtC,EAAM4C,GD4FzB,SAACgB,GACJxB,EAAsBE,GACjByB,MAAK,SAACC,GACH,IACMC,EATI,SAACC,EAAwB5B,GAAzB,MAAiD,CACvE6B,KAAM,YAAaD,QAAO5B,cAQC8B,CADDJ,EAAIK,KAAKC,MACUhC,GACjCsB,EAASK,WChGnB,IAEF,IAAMM,EAAU9B,uBAAY,SAACrC,GACzBJ,EAAMuE,QAAQnE,EAAOJ,EAAM4C,MAC5B,CAAC5C,EAAMuE,QAASvE,EAAM4C,KAKnB4B,EAAsB/B,uBAAY,SAACrC,GACrCJ,EAAMwE,oBAAoBxE,EAAM4C,GAAIxC,KACrC,CAACJ,EAAM4C,GAAI5C,EAAMwE,sBAEdC,EAAoBhC,uBAAY,kBAAMzC,EAAM0E,aAAa,MAAO1E,EAAM4C,MAAK,CAAC5C,EAAM4C,GAAI5C,EAAM0E,eAC5FC,EAAuBlC,uBAAY,kBAAMzC,EAAM0E,aAAa,SAAU1E,EAAM4C,MAAK,CAAC5C,EAAM4C,GAAI5C,EAAM0E,eAClGE,EAA0BnC,uBAAY,kBAAMzC,EAAM0E,aAAa,YAAa1E,EAAM4C,MAAK,CAAC5C,EAAM4C,GAAI5C,EAAM0E,eAG1GG,EAAmB7E,EAAMkE,MAS7B,MAPqB,WAAjBlE,EAAM8E,SACND,EAAmB7E,EAAMkE,MAAMY,QAAO,SAAAC,GAAC,OAAIA,EAAExB,SAAW5D,EAAauD,QAEpD,cAAjBlD,EAAM8E,SACND,EAAmB7E,EAAMkE,MAAMY,QAAO,SAAAC,GAAC,OAAIA,EAAExB,SAAW5D,EAAasD,cAGlE,gCACH,+BAAI,cAACzB,EAAD,CAAcZ,MAAOZ,EAAMI,MAAOS,SAAU2D,IAC5C,cAACpD,EAAA,EAAD,CAAYE,QAvBG,WACnBtB,EAAMgF,eAAehF,EAAM4C,KAsBvB,SACI,cAACa,EAAA,EAAD,SAGR,cAAC5D,EAAD,CAAaW,QAAS+D,IACtB,8BAEQM,EAAiBI,KAAI,SAAAF,GAAC,OAAI,cAACxC,EAAD,CAAiBI,KAAMoC,EAAGzC,WAAYtC,EAAM4C,GAC5CF,WAAY1C,EAAM0C,WAClBW,gBAAiBrD,EAAMqD,gBACvBL,iBAAkBhD,EAAMgD,kBAHb+B,EAAEnC,SAO/C,sBAAKsC,MAAO,CAACC,WAAY,QAAzB,UACI,cAACC,EAAA,EAAD,CAAQzE,QAA0B,QAAjBX,EAAM8E,OAAmB,WAAa,OAC/CxD,QAASmD,EACTpD,MAAO,UAFf,iBAKA,cAAC+D,EAAA,EAAD,CAAQzE,QAA0B,WAAjBX,EAAM8E,OAAsB,WAAa,OAClDxD,QAASqD,EACTtD,MAAO,UAFf,oBAIA,cAAC+D,EAAA,EAAD,CAAQzE,QAA0B,cAAjBX,EAAM8E,OAAyB,WAAa,OACrDxD,QAASsD,EACTvD,MAAO,YAFf,gC,+DCxENqC,EAA0C,GCiHjC2B,MAhGf,WAEI,IAAMC,EAAYC,aAAyD,SAAAC,GAAK,OAAIA,EAAMF,aACpFpB,EAAQqB,aAA8C,SAAAC,GAAK,OAAIA,EAAMtB,SACrEN,EAAWC,cACjBC,qBAAU,WACNF,GDyCG,SAACA,GACJxB,IACK2B,MAAK,SAACC,GACHJ,EANmD,CAACO,KAAM,gBAAiBmB,UAMnDtB,EAAIK,gBCzCxC,IAAM3B,EAAaD,uBAAY,SAAUG,EAAYN,GACjD,IAAM2B,EHoEc,SAACwB,EAAgBnD,GAAjB,MAAyC,CACjE6B,KAAM,cAAesB,OAAQA,EAAQnD,WAAYA,GGrE9BoD,CAAa9C,EAAIN,GAChCsB,EAASK,KACV,IAEGM,EAAU9B,uBAAY,SAAUrC,EAAekC,GACjD,IAAM2B,EHkEW,SAAC7D,EAAekC,GAAhB,MAAwC,CAAC6B,KAAM,WAAY/D,QAAOkC,cGlEpEqD,CAAUvF,EAAOkC,GAChCsB,EAASK,KACV,IAEG2B,EAAenD,uBAAY,SAAUG,EAAYW,EAAsBjB,GACzE,IAAM2B,EH8DoB,SAACwB,EAAgBlC,EAAsBjB,GAAvC,MAA+D,CAC7F6B,KAAM,qBAAsBZ,SAAQjB,aAAYmD,UG/D7BI,CAAmBjD,EAAIW,EAAQjB,GAC9CsB,EAASK,KACV,IAEGZ,EAAkBZ,uBAAY,SAAUG,EAAYkD,EAAkBxD,GACxE,IAAM2B,EH4DmB,SAACwB,EAAgBrF,EAAekC,GAAhC,MAAwD,CACrF6B,KAAM,oBAAqB/D,QAAOkC,aAAYmD,UG7D3BM,CAAkBnD,EAAIkD,EAAUxD,GAC/CsB,EAASK,KACV,IAEGS,EAAejC,uBAAY,SAAU7B,EAAyB0B,GAChE,IAAM2B,EDWmE,CAC7EE,KAAM,yBAA0BvB,GCZUN,EDYNwC,OCZkBlE,GAClDgD,EAASK,KACV,IAEGe,EAAiBvC,uBAAY,SAAUG,GACzC,IAAMqB,EDCkB,SAACrB,GAAD,MAAiB,CAACuB,KAAM,kBAAmBvB,MCDpDoD,CAAiBpD,GAChCgB,EAASK,KACV,IAEGO,EAAsB/B,uBAAY,SAAUG,EAAYxC,GAC1D,IAAM6D,EDFuB,SAACrB,EAAYxC,GAAb,MAAgC,CACjE+D,KAAM,wBAAyBvB,KAAIxC,SCChB6F,CAAsBrD,EAAIxC,GACzCwD,EAASK,KACV,IAEGiC,EAAczD,uBAAY,SAACrC,GAC7B,IAAM6D,EDRe,SAAC7D,GAAD,MAAoB,CAAC+D,KAAM,eAAgB/D,QAAOkC,WAAY6D,eCQpEC,CAAchG,GAC7BwD,EAASK,KACV,CAACL,IAEJ,OACI,sBAAKN,UAAU,MAAf,UACI,cAAC+C,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,WACI,cAACnF,EAAA,EAAD,CAAYoF,KAAK,QAAQnF,MAAM,UAAUoF,aAAW,OAApD,SACI,cAACC,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAYhG,QAAQ,KAApB,kBAGA,cAACyE,EAAA,EAAD,CAAQ/D,MAAM,UAAd,wBAGR,eAACuF,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAAC7B,MAAO,CAAC8B,QAAS,QAAjC,SACI,cAACnH,EAAD,CAAaW,QAAS0F,MAE1B,cAACY,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQ3B,EAAUL,KAAI,SAAAiC,GACV,IAAIC,EAAmBjD,EAAMgD,EAAGtE,IAEhC,OAAO,cAACkE,EAAA,EAAD,CAAMM,MAAI,EAAV,SACH,cAACC,EAAA,EAAD,CAAOnC,MAAO,CAAC8B,QAAS,QAAxB,SACI,cAACrD,EAAD,CACIf,GAAIsE,EAAGtE,GACPxC,MAAO8G,EAAG9G,MACV8D,MAAOiD,EACPzE,WAAYA,EACZgC,aAAcA,EACdH,QAASA,EACTvB,iBAAkB4C,EAClBd,OAAQoC,EAAGpC,OACXE,eAAgBA,EAChB3B,gBAAiBA,EACjBmB,oBAAqBA,OAbV0C,EAAGtE,gBCzFvC0E,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBzD,MAAK,YAAkD,IAA/C0D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gBCFRO,EAAcC,YAAgB,CAChC7D,MLiCwB,WAAgF,IAA/EsB,EAA8E,uDAAtD9B,EAAcO,EAAwC,uCACvG,OAAQA,EAAOE,MACX,IAAK,cACD,IAAM6D,EAAS,eAAOxC,GAChBtB,EAAQ8D,EAAU/D,EAAO3B,YACzB2F,EAAW/D,EAAMY,QAAO,SAAAC,GAAC,OAAIA,EAAEnC,KAAOqB,EAAOwB,UAEnD,OADAuC,EAAU/D,EAAO3B,YAAc2F,EACxBD,EAEX,IAAK,WACD,IAAMA,EAAS,eAAOxC,GAChB0C,EAAoB,CACtBtF,GAAIuD,cACJ/F,MAAO6D,EAAO7D,MACdmD,OAAQ5D,EAAauD,IACrBiF,WAAYlE,EAAO3B,WAAY8F,YAAa,GAC5CC,UAAW,GAAIC,SAAU,GAAIC,UAAW,GAAIC,MAAO,EAAGC,SAAU7I,EAAe8I,KAE7ExE,EAAQ8D,EAAU/D,EAAO3B,YACzB2F,EAAQ,CAAIC,GAAJ,mBAAgBhE,IAE9B,OADA8D,EAAU/D,EAAO3B,YAAc2F,EACxBD,EAEX,IAAK,qBACD,IAAIW,EAAgBnD,EAAMvB,EAAO3B,YAC7BsG,EAAgBD,EACf1D,KAAI,SAAAF,GAAC,OAAIA,EAAEnC,KAAOqB,EAAOwB,OAAhB,2BAA6BV,GAA7B,IAAgCxB,OAAQU,EAAOV,SAAUwB,KAGvE,OADAS,EAAMvB,EAAO3B,YAAcsG,EACpB,eAAKpD,GAEhB,IAAK,oBACD,IAAImD,EAAgBnD,EAAMvB,EAAO3B,YAE7BsG,EAAgBD,EACf1D,KAAI,SAAAF,GAAC,OAAIA,EAAEnC,KAAOqB,EAAOwB,OAAhB,2BAA6BV,GAA7B,IAAgC3E,MAAO6D,EAAO7D,QAAS2E,KAGrE,OADAS,EAAMvB,EAAO3B,YAAcsG,EACpB,eAAKpD,GAEhB,IAAK,eACD,OAAO,2BACAA,GADP,kBAEKvB,EAAO3B,WAAa,KAG7B,IAAK,kBACD,IAAMuG,EAAS,eAAOrD,GAEtB,cADOqD,EAAU5E,EAAOrB,IACjBiG,EAEX,IAAK,gBACD,IAAMA,EAAS,eAAOrD,GAItB,OAHAvB,EAAOqB,UAAUwD,SAAQ,SAAA5B,GACrB2B,EAAU3B,EAAGtE,IAAM,MAEhBiG,EAEX,IAAK,YACD,IAAMb,EAAS,eAAOxC,GAEtB,OADAwC,EAAU/D,EAAO3B,YAAc2B,EAAOC,MAC/B8D,EAGX,QACI,OAAOxC,IKjGfF,UHgB4B,WAAsG,IAArGE,EAAoG,uDAAjE9B,EAAcO,EAAmD,uCACjI,OAAQA,EAAOE,MACX,IAAK,kBACD,OAAOqB,EAAMV,QAAO,SAAAoC,GAAE,OAAIA,EAAGtE,KAAOqB,EAAOrB,MAE/C,IAAK,eACD,MAAM,CAAE,CACJA,GAAIqB,EAAO3B,WACXlC,MAAO6D,EAAO7D,MACd0E,OAAQ,MACRyD,UAAW,GACXC,MAAO,IALX,mBAMMhD,IAEV,IAAK,wBACD,IAAMuD,EAAWvD,EAAMwD,MAAK,SAAA9B,GAAE,OAAIA,EAAGtE,KAAOqB,EAAOrB,MAKnD,OAJImG,IAEAA,EAAS3I,MAAQ6D,EAAO7D,OAErB,YAAIoF,GAEf,IAAK,yBACD,IAAMuD,EAAWvD,EAAMwD,MAAK,SAAA9B,GAAE,OAAIA,EAAGtE,KAAOqB,EAAOrB,MAKnD,OAJImG,IAEAA,EAASjE,OAASb,EAAOa,QAEtB,YAAIU,GAEf,IAAK,gBACD,OAAOvB,EAAOqB,UAAUL,KAAI,SAAAiC,GACxB,OAAO,2BACAA,GADP,IAEIpC,OAAQ,WAIpB,QACI,OAAOU,MGpDNyD,EAAQC,YAAYpB,EAAaqB,YAAgBC,MAM9DC,OAAOJ,MAAQA,ECVfK,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRQ,SAASC,eAAe,SAM5BpC,K","file":"static/js/main.d2491568.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '64a287c1-e522-4e29-94f9-ca5e99eec17a'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from './EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { TaskStatuses, TaskType } from './api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {TasksStateType} from '../App';\r\nimport {v1} from 'uuid';\r\nimport {\r\n    AddTodolistActionType,\r\n    RemoveTodolistActionType,\r\n    SetTodolistActionType,\r\n    setTodolistsAC\r\n} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistActionType\r\n    | ReturnType<typeof setTasksAC>\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                status: TaskStatuses.New,\r\n                todoListId: action.todolistId, description: '',\r\n                startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low\r\n            }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            const copyState = {...state};\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = [];\r\n            })\r\n            return copyState;\r\n        }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\r\n    type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId\r\n} as const)\r\nexport const addTaskAC = (title: string, todolistId: string) => ({type: 'ADD-TASK', title, todolistId}) as const\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) => ({\r\n    type: 'CHANGE-TASK-STATUS', status, todolistId, taskId\r\n} as const)\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => ({\r\n    type: 'CHANGE-TASK-TITLE', title, todolistId, taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS', tasks, todolistId\r\n} as const)\r\n\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                const tasks = res.data.items\r\n                const action = setTasksAC(tasks, todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {fetchTodolistsTC, FilterValuesType} from './state/todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"./state/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id));\r\n    },[])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {v1} from 'uuid';\r\nimport {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistActionType = ReturnType<typeof setTodolistsAC>\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistActionType\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all',\r\n                addedDate: '',\r\n                order: 0\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => {\r\n                return {\r\n                    ...tl,\r\n                    filter: \"all\"\r\n                }\r\n            })\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id}) as const\r\nexport const addTodolistAC = (title: string) => ({type: 'ADD-TODOLIST', title, todolistId: v1()}) as const\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE', id, title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER', id, filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists}) as const\r\n\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n            })\r\n    }\r\n}\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC, fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistAC,\r\n    TodolistDomainType\r\n} from './state/todolists-reducer'\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    })\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const action = addTaskAC(title, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const action = changeTaskStatusAC(id, status, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { tasksReducer } from './tasks-reducer';\r\nimport { todolistsReducer } from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}